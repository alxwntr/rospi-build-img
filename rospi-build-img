#!/bin/sh

. ./config

exec 3>&1

say () {
    echo "$*" >&3
}

warn () {
    echo "$*" >&2
}

die () {
    warn "$*"
    exit 1
}

# loop_start IMAGE
# Creates a loop device and prints its name
loop_start () {
    local img="$1"
    local lo=

    lo="$(losetup -f --show "$img")"
    [ $? -eq 0 ] || die "Can't setup loop device!"

    partprobe "$lo"
    echo "$lo"
}

# loop_stop DEV
# Detaches a loop device
loop_stop () {
    local lo="$1"

    losetup -d "$lo"
}

# img_create IMAGE SIZE SWAP
# Create an image file and set up the filesystems.
img_create () {
    local img="$1" size="$2" swap="$3"

    img_create_file "$img" "$size"
    img_partition "$img" "$swap"
    img_mkfs "$img" "$swap"
}

# img_create_file IMAGE SIZE
# Create an image file
img_create_file () {
    local img="$1" size="$2"

    say "Creating image [$img] ($size)..."
    rm -f "$img"
    truncate -s "$size" "$img"
}

# img_partition IMAGE SWAP
# Set up the partition table.
img_partition () {
    local img="$1" swap="$2"
    local swpart=

    say "Setting up partition table..."
    [ -n "$swap" ] && swpart="- $swap 82 -"
    sfdisk -q "$img" <<FDISK
label: dos
- 256M c *
$swpart
- - 83 -
FDISK
}

# img_mkfs IMAGE SWAP
# Create the filesystems.
img_mkfs () {
    local img="$1" swap="$2"
    local lo=
    local bootpart="p1"
    local rootpart="p2"

    say "Creating filesystems..."

    lo="$(loop_start "$img")"

    if [ -n "$swap" ]
    then
        mkswap "${lo}p2"
        rootpart="p3"
    fi

    mkfs.vfat "$lo$bootpart"
    mkfs.ext4 "$lo$rootpart"

    # Unloop the device here. Sometimes the kernel gets upset if we don't do
    # this, and starts complaining about WRITE_ZEROS failures. (This may only
    # happen if the img is on NFS.)
    loop_stop "$lo"
}

# img_mount IMAGE DIR SWAP
# Mount the filesystems from IMAGE on DIR
img_mount () {
    local img="$1" dir="$2" swap="$3"
    local lo= bootpart="p1" rootpart="p2"

    [ -n "$swap" ] && rootpart="p3"

    say "Mounting filesystems on [$dir]..."

    lo="$(loop_start "$img")"

    mkdir -p "$dir"
    mount -t ext4 "$lo$rootpart" "$dir"
    mkdir -p "$dir/boot/firmware"
    mount -t vfat "$lo$bootpart" "$dir/boot/firmware"

    echo "$lo"
}

# img_build IMAGE
# Build and image according to the config
img_build () {
    local img="$1"
    local root="./root"
    local lo=

    : ${image_size:="10G"}

    [ -z "$img" ]           && die "Must specify an image filename!"
    [ -z "$dist_release" ]  && die "Must specify dist_release!"
    [ -z "$dist_mirror" ]   && die "Must specify dist_mirror!"

    [ -n "$http_proxy" ] && export http_proxy

    img_create "$img" "$image_size" "$image_swap"
    lo="$(img_mount "$img" "$root" "$image_swap")"

    debootstrap "$dist_release" "$root" "$dist_mirror"
}

img_build "$@"
