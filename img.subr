# img.subr
# Functions for manipulating image files

# img_config
# Set globals based on the config
img_config () {
    : ${image_size:=10G}

    part_boot="p1"

    if [ -n "${image_swap}" ]
    then
        part_swap="p2"
        part_root="p3"
    else
        part_swap=""
        part_root="p2"
    fi
}

# img_create IMAGE
# Create an image file and set up the filesystems.
img_create () {
    local img="$1"

    img_create_file "$img"
    img_partition "$img"
    img_mkfs "$img"
}

# img_create_file IMAGE
# Create an image file
img_create_file () {
    local img="$1"

    say "Creating image [$img] ($size)..."
    rm -f "$img"
    truncate -s "${image_size}" "$img"
}

# img_partition IMAGE
# Set up the partition table.
img_partition () {
    local img="$1"
    local swpart=

    say "Setting up partition table..."
    [ -n "${image_swap}" ] && swpart="- ${image_swap} 82 -"

    sfdisk -q "$img" <<FDISK
label: dos
- 256M c *
$swpart
- - 83 -
FDISK
}

# img_mkfs IMAGE
# Create the filesystems.
img_mkfs () {
    local img="$1"
    local lo=

    say "Creating filesystems..."

    lo="$(loop_start "$img")"

    mkfs.vfat -n "rospi-boot" "${lo}${part_boot}"
    [ -n "${part_swap}" ] && mkswap -L "rospi-swap" "${lo}${part_swap}"
    mkfs.ext4 -E nodiscard -L "rospi-root" "${lo}${part_root}"

    loop_stop "$lo"
}

# img_mount IMAGE DIR
# Mount the filesystems from IMAGE on DIR
img_mount () {
    local img="$1" dir="$2"
    local lo=

    say "Mounting filesystems on [$dir]..."

    lo="$(loop_start "$img")"

    # Don't use install_dir, there might be perm issues on NFS.
    # All we care about here is that the directory exists.
    mkdir -p "$dir"
    mount -t ext4 "${lo}${part_root}" "$dir"
    install_dir "$dir/boot/firmware"
    mount -t vfat "${lo}${part_boot}" "$dir/boot/firmware"
}

# img_umount DIR LOOP
# Unmount the image from DIR and unloop LOOP
img_umount () {
    local root="$1"
    local part="$(findmnt -no source "$root")"
    local lo="${part%p*}"

    [ -e "$lo" ] || die "No mount device [$lo]"

    say "Unmounting [$lo] from [$root]..."

    umount --recursive "$root"
    loop_stop "$lo"
}

# img_write_fstab
# Write a suitable fstab file
img_write_fstab () {
    local swline=
    local fstab="$image_root/etc/fstab"

    [ -d "$image_root" ] || die "No image mounted!"
    
    cat >"$fstab" <<FSTAB
LABEL=rospi-root    /               ext4    rw  1 0
LABEL=rospi-boot    /boot/firmware  vfat    rw  2 0
FSTAB

    [ -n "$image_swap" ] && cat >>"$fstab" <<FSTAB
LABEL=rospi-swap    swap            swap    sw  0 0
FSTAB
}

# img_shrink_fs IMG
# Resize the root fs on PART as small as possible
img_shrink_fs () {
    local img="$1"
    local dev= pdev= pnum=
    local blk_sz= blk_cnt= sct_cnt= sct_end= byt_end=

    dev="$(loop_start "$img")"
    pdev="$dev$part_root"
    pnum="${part_root#p}"

    e2fsck -y -f "$pdev" 
    resize2fs -M "$pdev"
    sync

    blk_sz="$(dev_fs_param "$pdev" "Block size")"
    blk_cnt="$(dev_fs_param "$pdev" "Block count")"
    sct_cnt=$(( ($blk_sz * $blk_cnt) / 512 ))

    echo "size=$sct_cnt" | sfdisk -N "$pnum" "$dev"
    partprobe "$dev"

    sct_end="$(dev_last_block "$dev")"
    byt_end=$(( ($sct_end + 1) * 512 ))

    loop_stop "$dev"

    truncate -s "$byt_end" "$img"
}

# vi:set ft=sh:
